{"ast":null,"code":"/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n  /**\n   * This method is called by jTPS when a transaction is executed.\n   */\n  doTransaction() {\n    console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n  }\n\n  /**\n   * This method is called by jTPS when a transaction is undone.\n   */\n  undoTransaction() {\n    console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n  }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n  constructor() {\n    // THE TRANSACTION STACK\n    this.transactions = [];\n\n    // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n    // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n    this.numTransactions = 0;\n\n    // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n    // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n    // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n    // AND STILL COULD BE REDONE.\n    this.mostRecentTransaction = -1;\n\n    // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n    // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n    // MANAGE CONCURRENT UPDATES\n    this.performingDo = false;\n    this.performingUndo = false;\n  }\n\n  /**\n   * isPerformingDo\n   * \n   * Accessor method for getting a boolean representing whether or not\n   * a transaction is currently in the midst of a do/redo operation.\n   */\n  isPerformingDo() {\n    return this.performingDo;\n  }\n\n  /**\n   * isPerformingUndo\n   * \n   * Accessor method for getting a boolean representing whether or not\n   * a transaction is currently in the midst of an undo operation.\n   */\n  isPerformingUndo() {\n    return this.performingUndo;\n  }\n\n  /**\n   * getSize\n   * \n   * Accessor method for getting the number of transactions on the stack.\n   */\n  getSize() {\n    return this.transactions.length;\n  }\n\n  /**\n   * getRedoSize\n   * \n   * Method for getting the total number of transactions on the stack\n   * that can possibly be redone.\n   */\n  getRedoSize() {\n    return this.getSize() - this.mostRecentTransaction - 1;\n  }\n\n  /**\n   * getUndoSize\n   * \n   * Method for getting the total number of transactions on the stack\n   * that can possible be undone.\n   */\n  getUndoSize() {\n    return this.mostRecentTransaction + 1;\n  }\n\n  /**\n   * hasTransactionToRedo\n   * \n   * Method for getting a boolean representing whether or not\n   * there are transactions on the stack that can be redone.\n   */\n  hasTransactionToRedo() {\n    return this.mostRecentTransaction + 1 < this.numTransactions;\n  }\n\n  /**\n   * hasTransactionToUndo\n   * \n   * Method for getting a boolean representing whehter or not\n   * there are transactions on the stack that can be undone.\n   */\n  hasTransactionToUndo() {\n    return this.mostRecentTransaction >= 0;\n  }\n\n  /**\n   * addTransaction\n   * \n   * Method for adding a transaction to the TPS stack, note it\n   * also then does the transaction.\n   * \n   * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n   */\n  addTransaction(transaction) {\n    // ARE WE BRANCHING?\n    if (this.mostRecentTransaction < 0 || this.mostRecentTransaction < this.transactions.length - 1) {\n      for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n        this.transactions.splice(i, 1);\n      }\n      this.numTransactions = this.mostRecentTransaction + 2;\n    } else {\n      this.numTransactions++;\n    }\n\n    // ADD THE TRANSACTION\n    this.transactions[this.mostRecentTransaction + 1] = transaction;\n\n    // AND EXECUTE IT\n    this.doTransaction();\n  }\n\n  /**\n   * doTransaction\n   * \n   * Does the current transaction on the stack and advances the transaction\n   * counter. Note this function may be invoked as a result of either adding\n   * a transaction (which also does it), or redoing a transaction.\n   */\n  doTransaction() {\n    if (this.hasTransactionToRedo()) {\n      this.performingDo = true;\n      let transaction = this.transactions[this.mostRecentTransaction + 1];\n      transaction.doTransaction();\n      this.mostRecentTransaction++;\n      this.performingDo = false;\n    }\n  }\n\n  /**\n   * This function gets the most recently executed transaction on the \n   * TPS stack and undoes it, moving the TPS counter accordingly.\n   */\n  undoTransaction() {\n    if (this.hasTransactionToUndo()) {\n      this.performingUndo = true;\n      let transaction = this.transactions[this.mostRecentTransaction];\n      transaction.undoTransaction();\n      this.mostRecentTransaction--;\n      this.performingUndo = false;\n    }\n  }\n\n  /**\n   * clearAllTransactions\n   * \n   * Removes all the transactions from the TPS, leaving it with none.\n   */\n  clearAllTransactions() {\n    // REMOVE ALL THE TRANSACTIONS\n    this.transactions = [];\n\n    // MAKE SURE TO RESET THE LOCATION OF THE\n    // TOP OF THE TPS STACK TOO\n    this.mostRecentTransaction = -1;\n    this.numTransactions = 0;\n  }\n\n  /**\n   * toString\n   * \n   * Builds and returns a textual represention of the full TPS and its stack.\n   */\n  toString() {\n    let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n    text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n    text += \"--Current Transaction Stack:\\n\";\n    for (let i = 0; i <= this.mostRecentTransaction; i++) {\n      let jT = this.transactions[i];\n      text += \"----\" + jT.toString() + \"\\n\";\n    }\n    return text;\n  }\n}","map":{"version":3,"names":["jsTPS_Transaction","doTransaction","console","log","undoTransaction","jsTPS","constructor","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","isPerformingDo","isPerformingUndo","getSize","length","getRedoSize","getUndoSize","hasTransactionToRedo","hasTransactionToUndo","addTransaction","transaction","i","splice","clearAllTransactions","toString","text","jT"],"sources":["/Users/tommylin/CSE 316 HW/Playlister_HW3/client/src/common/jsTPS.js"],"sourcesContent":["/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}